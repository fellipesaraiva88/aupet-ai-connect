/**
 * PNL (Programa√ß√£o Neurolingu√≠stica) Patterns
 * T√©cnicas de persuas√£o e comunica√ß√£o humanizada
 */

export interface PNLTechnique {
  name: string;
  description: string;
  patterns: string[];
  examples: string[];
}

/**
 * T√©cnicas de PNL aplic√°veis em conversas de vendas
 */
export const PNL_TECHNIQUES = {
  // RAPPORT - Criar conex√£o emocional
  rapport: {
    name: 'Rapport',
    description: 'Cria conex√£o emocional espelhando linguagem e emo√ß√µes',
    patterns: [
      'Entendo completamente...',
      'Eu sei exatamente como voc√™ se sente...',
      'Tamb√©m j√° passei por isso...',
      'Compreendo sua preocupa√ß√£o...'
    ],
    examples: [
      'Entendo completamente sua preocupa√ß√£o com o {pet}! √â normal ficarmos assim quando nossos pets n√£o est√£o 100%.',
      'Eu sei exatamente como voc√™ se sente! O {pet} √© parte da fam√≠lia n√©? üíï'
    ]
  },

  // ANCORAGEM - Vincular emo√ß√µes positivas
  ancoragem: {
    name: 'Ancoragem',
    description: 'Vincula servi√ßo/produto a emo√ß√µes positivas',
    patterns: [
      'Imagina s√≥...',
      'Visualiza...',
      'Lembra aquela sensa√ß√£o de...',
      'Pensa comigo...'
    ],
    examples: [
      'Imagina s√≥ o {pet} voltando pra casa cheirosinho, peludinho e feliz! üòç',
      'Visualiza ele correndo e brincando sem dor... √â isso que queremos pra ele n√©?'
    ]
  },

  // ESCASSEZ - Urg√™ncia sutil
  escassez: {
    name: 'Escassez',
    description: 'Cria sensa√ß√£o de urg√™ncia sem press√£o',
    patterns: [
      'S√≥ tenho...',
      '√öltimas vagas...',
      'Por hoje ainda consigo...',
      'Tenho uma vaguinha ainda...'
    ],
    examples: [
      'Olha, tenho uma vaguinha ainda hoje √†s 16h! Quer que eu reserve pro {pet}?',
      'Por hoje ainda consigo encaixar ele... Amanh√£ j√° t√° lotado!'
    ]
  },

  // PROVA SOCIAL - Outros clientes adoram
  provaSocial: {
    name: 'Prova Social',
    description: 'Usa experi√™ncias de outros clientes',
    patterns: [
      'Outros tutores...',
      'A maioria dos clientes...',
      'Os pets adoram...',
      'Todo mundo que faz...'
    ],
    examples: [
      'Outros tutores de {especie} adoraram esse tratamento! Os pets saem super tranquilos.',
      'A maioria dos nossos clientes faz isso mensalmente... Os pets ficam lindos!'
    ]
  },

  // AUTORIDADE - Conhecimento t√©cnico sutil
  autoridade: {
    name: 'Autoridade',
    description: 'Demonstra conhecimento sem ser t√©cnico demais',
    patterns: [
      'Nossa veterin√°ria sempre recomenda...',
      'Especialistas indicam...',
      'Por experi√™ncia...',
      'O ideal √©...'
    ],
    examples: [
      'Nossa veterin√°ria sempre recomenda fazer isso a cada 3 meses... Previne v√°rias doencinhas!',
      'Por experi√™ncia, {especies} precisam desse cuidado especial nessa √©poca do ano.'
    ]
  },

  // RECIPROCIDADE - Dar antes de pedir
  reciprocidade: {
    name: 'Reciprocidade',
    description: 'Oferece valor antes de vender',
    patterns: [
      'Deixa eu te dar uma dica...',
      'Vou te contar um segredo...',
      'Posso te ajudar com isso...',
      'Olha s√≥ que legal...'
    ],
    examples: [
      'Deixa eu te dar uma dica: Voc√™ pode escovar o {pet} em casa antes de trazer... Fica mais r√°pido e ele fica mais confort√°vel!',
      'Vou te contar um segredo: Se voc√™ trazer ele na segunda ou ter√ßa, tem desconto! üòâ'
    ]
  },

  // PRESSUPOSI√á√ÉO - Assume aceita√ß√£o
  pressuposicao: {
    name: 'Pressuposi√ß√£o',
    description: 'Pressup√µe que o cliente vai aceitar',
    patterns: [
      'Quando voc√™ trouxer...',
      'Depois que ele fizer...',
      'Na pr√≥xima vez...',
      'Assim que...'
    ],
    examples: [
      'Quando voc√™ trouxer o {pet}, vamos fazer um check-up completo, ok?',
      'Depois que ele fizer o banho, j√° aproveita e faz as unhinhas! Fica perfeito.'
    ]
  },

  // PERGUNTAS DIRIGIDAS - Leva √† conclus√£o desejada
  perguntasDirigidas: {
    name: 'Perguntas Dirigidas',
    description: 'Faz perguntas que levam ao sim',
    patterns: [
      'N√£o √© mesmo?',
      'Voc√™ acha que...?',
      'Seria bom se...?',
      'N√£o concorda?'
    ],
    examples: [
      'Seria bom cuidar disso logo, n√£o √© mesmo? Antes que piore...',
      'Voc√™ acha que o {pet} est√° precisando de um carinho especial, n√©?'
    ]
  }
};

/**
 * Gatilhos mentais espec√≠ficos para pet shops
 */
export const MENTAL_TRIGGERS = {
  amor_pet: {
    trigger: 'amor',
    phrases: [
      'Ele merece todo carinho do mundo!',
      'Nosso amor de 4 patas!',
      'Coisa mais linda!',
      'Beb√™ perfeito!'
    ]
  },

  culpa_produtiva: {
    trigger: 'culpa',
    phrases: [
      'Faz tempo que ele n√£o...',
      'Ele t√° precisando de...',
      'Que tal darmos uma aten√ß√£o especial pra ele?'
    ]
  },

  medo_perda: {
    trigger: 'medo',
    phrases: [
      'Prevenir √© sempre melhor...',
      'Antes que vire algo s√©rio...',
      'N√£o queremos que ele sofra, n√©?'
    ]
  },

  pertencimento: {
    trigger: 'grupo',
    phrases: [
      'Aqui somos todos apaixonados por pets!',
      'Nossa comunidade de tutores...',
      'Faz parte da fam√≠lia Auzap!'
    ]
  }
};

/**
 * Padr√µes de linguagem humanizada (Milton Model)
 */
export const MILTON_PATTERNS = [
  'Voc√™ pode come√ßar a notar...',
  '√â interessante como...',
  'Talvez voc√™ j√° tenha percebido...',
  'Algumas pessoas descobrem que...',
  '√Ä medida que voc√™ pensa sobre...'
];

/**
 * Aplica t√©cnica de PNL em uma mensagem
 */
export function applyPNLTechnique(
  message: string,
  technique: keyof typeof PNL_TECHNIQUES,
  variables: Record<string, string> = {}
): string {
  const tech = PNL_TECHNIQUES[technique];

  // Seleciona um pattern aleat√≥rio da t√©cnica
  const pattern = tech.patterns[Math.floor(Math.random() * tech.patterns.length)];

  // Substitui vari√°veis
  let result = pattern;
  Object.keys(variables).forEach(key => {
    result = result.replace(new RegExp(`{${key}}`, 'g'), variables[key]);
  });

  return result;
}

/**
 * Seleciona t√©cnica de PNL baseada na inten√ß√£o
 */
export function selectPNLTechniqueByIntent(intent: string): keyof typeof PNL_TECHNIQUES {
  const intentTechniqueMap: Record<string, keyof typeof PNL_TECHNIQUES> = {
    'agendar': 'escassez',
    'duvida': 'autoridade',
    'orcamento': 'provaSocial',
    'informacao': 'reciprocidade',
    'emergencia': 'rapport',
    'reclamacao': 'rapport',
    'elogio': 'ancoragem'
  };

  return intentTechniqueMap[intent] || 'rapport';
}