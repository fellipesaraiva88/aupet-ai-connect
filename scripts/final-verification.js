#!/usr/bin/env node

/**
 * Script final para verificar se todas as corre√ß√µes est√£o funcionando
 */

const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

const supabaseUrl = process.env.SUPABASE_URL || process.env.VITE_SUPABASE_URL;
const supabaseKey = process.env.SUPABASE_SERVICE_KEY || process.env.SUPABASE_ANON_KEY || process.env.VITE_SUPABASE_ANON_KEY;

const supabase = createClient(supabaseUrl, supabaseKey);

async function testDatabaseConnection() {
  console.log('üîç Testando conex√£o com o banco...');

  try {
    const { data, error } = await supabase
      .from('organizations')
      .select('id, name')
      .limit(1);

    if (error) {
      console.log(`‚ùå Erro na conex√£o: ${error.message}`);
      return false;
    }

    console.log(`‚úÖ Conex√£o funcionando. ${data?.length || 0} organiza√ß√µes encontradas`);
    return true;
  } catch (error) {
    console.log(`‚ùå Erro de conex√£o: ${error.message}`);
    return false;
  }
}

async function testOrganizationExists() {
  console.log('üè¢ Verificando se organiza√ß√£o padr√£o existe...');

  try {
    const { data, error } = await supabase
      .from('organizations')
      .select('id, name')
      .eq('id', '00000000-0000-0000-0000-000000000001')
      .single();

    if (error && error.code === 'PGRST116') {
      console.log('‚ùå Organiza√ß√£o padr√£o N√ÉO EXISTE');
      console.log('üí° Execute o script SQL: scripts/temp-database-fix.sql');
      return false;
    }

    if (error) {
      console.log(`‚ùå Erro ao verificar organiza√ß√£o: ${error.message}`);
      return false;
    }

    console.log(`‚úÖ Organiza√ß√£o padr√£o existe: ${data.name}`);
    return true;
  } catch (error) {
    console.log(`‚ùå Erro: ${error.message}`);
    return false;
  }
}

async function testTablesAccess() {
  console.log('üìã Testando acesso √†s tabelas principais...');

  const tables = [
    'organizations',
    'customers',
    'whatsapp_contacts',
    'whatsapp_conversations',
    'whatsapp_messages',
    'pets',
    'appointments'
  ];

  let allTablesOk = true;

  for (const table of tables) {
    try {
      const { data, error } = await supabase
        .from(table)
        .select('*')
        .limit(1);

      if (error) {
        console.log(`‚ùå ${table}: ${error.message}`);
        allTablesOk = false;
      } else {
        console.log(`‚úÖ ${table}: Acess√≠vel (${data?.length || 0} registros)`);
      }
    } catch (error) {
      console.log(`‚ùå ${table}: ${error.message}`);
      allTablesOk = false;
    }
  }

  return allTablesOk;
}

async function testCustomerIdColumn() {
  console.log('üîó Verificando coluna customer_id em whatsapp_contacts...');

  try {
    const { data, error } = await supabase
      .from('whatsapp_contacts')
      .select('customer_id')
      .limit(1);

    if (error && error.message.includes('does not exist')) {
      console.log('‚ùå Coluna customer_id N√ÉO EXISTE');
      console.log('üí° Execute o script SQL: scripts/temp-database-fix.sql');
      return false;
    }

    if (error) {
      console.log(`‚ùå Erro ao verificar customer_id: ${error.message}`);
      return false;
    }

    console.log('‚úÖ Coluna customer_id existe');
    return true;
  } catch (error) {
    console.log(`‚ùå Erro: ${error.message}`);
    return false;
  }
}

async function testBackendEndpoints() {
  console.log('üöÄ Testando se backend pode iniciar...');

  try {
    // Simular carregamento dos arquivos principais
    const path = require('path');
    const backendPath = path.join(process.cwd(), 'backend');

    // Verificar se arquivos existem
    const fs = require('fs');
    const filesToCheck = [
      'backend/src/routes/conversations.ts',
      'backend/src/routes/customers.ts',
      'backend/src/middleware/auth.ts',
      'backend/src/services/supabase.ts'
    ];

    let filesOk = true;
    filesToCheck.forEach(file => {
      if (fs.existsSync(file)) {
        console.log(`‚úÖ ${file}: Existe`);
      } else {
        console.log(`‚ùå ${file}: N√ÉO EXISTE`);
        filesOk = false;
      }
    });

    return filesOk;
  } catch (error) {
    console.log(`‚ùå Erro ao verificar arquivos: ${error.message}`);
    return false;
  }
}

async function generateStatusReport() {
  console.log('\nüìä Gerando relat√≥rio de status...\n');

  const tests = [
    { name: 'Conex√£o com banco', test: await testDatabaseConnection() },
    { name: 'Organiza√ß√£o padr√£o', test: await testOrganizationExists() },
    { name: 'Acesso √†s tabelas', test: await testTablesAccess() },
    { name: 'Coluna customer_id', test: await testCustomerIdColumn() },
    { name: 'Arquivos backend', test: await testBackendEndpoints() }
  ];

  console.log('\nüìã RELAT√ìRIO DE STATUS:');
  console.log('======================');

  let allPassed = true;
  tests.forEach(({ name, test }) => {
    const status = test ? '‚úÖ PASSOU' : '‚ùå FALHOU';
    console.log(`${status} - ${name}`);
    if (!test) allPassed = false;
  });

  console.log('\nüéØ PR√ìXIMOS PASSOS:');
  console.log('==================');

  if (allPassed) {
    console.log('üéâ TUDO FUNCIONANDO!');
    console.log('1. Execute o backend: cd backend && npm run dev');
    console.log('2. Teste os endpoints com Postman ou curl');
    console.log('3. Verifique logs do backend para confirmar');
  } else {
    console.log('‚ö†Ô∏è  ALGUMAS CORRE√á√ïES AINDA NECESS√ÅRIAS:');

    if (!tests[1].test) { // Organiza√ß√£o
      console.log('‚Ä¢ Execute o script SQL no Supabase: scripts/temp-database-fix.sql');
    }

    if (!tests[3].test) { // customer_id
      console.log('‚Ä¢ Adicione coluna customer_id manualmente no Supabase');
    }

    if (!tests[2].test) { // Tabelas
      console.log('‚Ä¢ Verifique pol√≠ticas RLS no Supabase');
    }

    if (!tests[4].test) { // Backend
      console.log('‚Ä¢ Verifique se todos os arquivos backend existem');
    }
  }

  console.log('\nüìö RECURSOS CRIADOS:');
  console.log('====================');
  console.log('‚Ä¢ scripts/temp-database-fix.sql - Script SQL para o banco');
  console.log('‚Ä¢ scripts/database-fix-report.md - Relat√≥rio detalhado');
  console.log('‚Ä¢ scripts/check-database-schema.js - Verifica√ß√£o de schema');
  console.log('‚Ä¢ scripts/final-verification.js - Este script');

  console.log('\n‚úÖ Verifica√ß√£o final conclu√≠da!');

  return allPassed;
}

async function main() {
  console.log('üîç VERIFICA√á√ÉO FINAL DO SISTEMA\n');
  console.log('Este script verifica se todas as corre√ß√µes foram aplicadas corretamente.\n');

  const success = await generateStatusReport();

  if (success) {
    console.log('\nüöÄ SISTEMA PRONTO PARA USO!');
    process.exit(0);
  } else {
    console.log('\n‚ö†Ô∏è  SISTEMA PRECISA DE CORRE√á√ïES ADICIONAIS');
    process.exit(1);
  }
}

if (require.main === module) {
  main().catch(console.error);
}

module.exports = { main };