name: Deploy to Production

on:
  push:
    branches: [main]
    paths:
      - 'backend/**'
      - 'frontend/**'
      - 'package.json'
      - 'package-lock.json'
      - '.github/workflows/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging

env:
  NODE_VERSION: '20'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/auzap-backend

jobs:
  # Test and Quality Checks
  test:
    name: Run Tests and Quality Checks
    runs-on: ubuntu-latest
    strategy:
      matrix:
        workspace: [backend, frontend]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          cd ${{ matrix.workspace }}
          npm ci

      - name: Run TypeScript check
        run: |
          cd ${{ matrix.workspace }}
          npm run build

      - name: Run linting
        run: |
          cd ${{ matrix.workspace }}
          npm run lint || true

      - name: Run tests
        run: |
          cd ${{ matrix.workspace }}
          npm run test || true

  # Security Scanning
  security:
    name: Security Scanning
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Audit npm packages
        run: |
          cd backend && npm audit --audit-level=moderate || true
          cd ../frontend && npm audit --audit-level=moderate || true

  # Build and Deploy Backend
  deploy-backend:
    name: Deploy Backend to Render
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.ref == 'refs/heads/main'
    environment:
      name: production
      url: https://auzap-backend-api.onrender.com

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Build backend
        run: |
          cd backend
          npm ci --only=production
          npm run build

      - name: Deploy to Render
        uses: render-deploy-action@v1.4.0
        with:
          service-id: ${{ secrets.RENDER_BACKEND_SERVICE_ID }}
          api-key: ${{ secrets.RENDER_API_KEY }}
          wait-for-success: true

      - name: Health Check
        run: |
          sleep 30
          curl -f https://auzap-backend-api.onrender.com/health || exit 1

      - name: Notify Slack on Success
        if: success()
        uses: 8398a7/action-slack@v3
        with:
          status: success
          text: '✅ Backend deployed successfully to production!'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Notify Slack on Failure
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          text: '❌ Backend deployment failed!'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # Build and Deploy Frontend
  deploy-frontend:
    name: Deploy Frontend to Render
    runs-on: ubuntu-latest
    needs: [test, security, deploy-backend]
    if: github.ref == 'refs/heads/main'
    environment:
      name: production
      url: https://auzap-frontend.onrender.com

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Build frontend
        run: |
          cd frontend
          npm ci
          VITE_API_URL=https://auzap-backend-api.onrender.com/api npm run build

      - name: Deploy to Render
        uses: render-deploy-action@v1.4.0
        with:
          service-id: ${{ secrets.RENDER_FRONTEND_SERVICE_ID }}
          api-key: ${{ secrets.RENDER_API_KEY }}
          wait-for-success: true

      - name: Health Check
        run: |
          sleep 30
          curl -f https://auzap-frontend.onrender.com || exit 1

      - name: Notify Slack on Success
        if: success()
        uses: 8398a7/action-slack@v3
        with:
          status: success
          text: '✅ Frontend deployed successfully to production!'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # Performance Tests
  performance:
    name: Performance Testing
    runs-on: ubuntu-latest
    needs: [deploy-backend, deploy-frontend]
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install Lighthouse CI
        run: npm install -g @lhci/cli@0.13.x

      - name: Run Lighthouse CI
        run: |
          lhci autorun --upload.target=temporary-public-storage
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

  # Post-deployment monitoring
  monitor:
    name: Post-deployment Monitoring
    runs-on: ubuntu-latest
    needs: [deploy-backend, deploy-frontend]
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Monitor Backend Health
        run: |
          for i in {1..5}; do
            echo "Health check attempt $i"
            if curl -f https://auzap-backend-api.onrender.com/health; then
              echo "✅ Backend is healthy"
              break
            else
              echo "❌ Backend health check failed, retrying in 30s..."
              sleep 30
            fi
            if [ $i -eq 5 ]; then
              echo "❌ Backend health checks failed after 5 attempts"
              exit 1
            fi
          done

      - name: Monitor Frontend Health
        run: |
          for i in {1..5}; do
            echo "Frontend check attempt $i"
            if curl -f https://auzap-frontend.onrender.com; then
              echo "✅ Frontend is accessible"
              break
            else
              echo "❌ Frontend check failed, retrying in 30s..."
              sleep 30
            fi
            if [ $i -eq 5 ]; then
              echo "❌ Frontend checks failed after 5 attempts"
              exit 1
            fi
          done

      - name: Create GitHub Deployment Status
        uses: actions/github-script@v7
        with:
          script: |
            const deployment = await github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.sha,
              environment: 'production',
              description: 'Automated deployment',
              auto_merge: false
            });

            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: deployment.data.id,
              state: 'success',
              description: 'Deployment completed successfully',
              environment_url: 'https://auzap-frontend.onrender.com'
            });