name: Deploy to Staging

on:
  push:
    branches: [develop, staging]
  pull_request:
    branches: [main]
    types: [opened, synchronize, reopened]

env:
  NODE_VERSION: '20'

jobs:
  # Quality Checks for PR/Staging
  test:
    name: Run Tests and Quality Checks
    runs-on: ubuntu-latest
    strategy:
      matrix:
        workspace: [backend, frontend]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          cd ${{ matrix.workspace }}
          npm ci

      - name: Run TypeScript check
        run: |
          cd ${{ matrix.workspace }}
          npm run build

      - name: Run linting
        run: |
          cd ${{ matrix.workspace }}
          npm run lint

      - name: Run tests
        run: |
          cd ${{ matrix.workspace }}
          npm run test || true

  # E2E Tests with Playwright
  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Start backend for testing
        run: |
          cd backend
          npm ci
          npm run build
          npm start &
          sleep 10
        env:
          NODE_ENV: test
          PORT: 3001

      - name: Start frontend for testing
        run: |
          cd frontend
          npm ci
          VITE_API_URL=http://localhost:3001/api npm run build
          npx serve -s dist -l 3000 &
          sleep 5
        env:
          CI: true

      - name: Run Playwright tests
        run: npx playwright test
        env:
          BASE_URL: http://localhost:3000

      - name: Upload Playwright report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30

  # Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [test, e2e-tests]
    if: github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/staging'
    environment:
      name: staging
      url: https://auzap-staging.onrender.com

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Build backend
        run: |
          cd backend
          npm ci --only=production
          npm run build

      - name: Deploy Backend to Staging
        uses: render-deploy-action@v1.4.0
        with:
          service-id: ${{ secrets.RENDER_STAGING_BACKEND_SERVICE_ID }}
          api-key: ${{ secrets.RENDER_API_KEY }}
          wait-for-success: true

      - name: Build frontend
        run: |
          cd frontend
          npm ci
          VITE_API_URL=https://auzap-backend-staging.onrender.com/api npm run build

      - name: Deploy Frontend to Staging
        uses: render-deploy-action@v1.4.0
        with:
          service-id: ${{ secrets.RENDER_STAGING_FRONTEND_SERVICE_ID }}
          api-key: ${{ secrets.RENDER_API_KEY }}
          wait-for-success: true

      - name: Health Check Staging
        run: |
          sleep 30
          curl -f https://auzap-backend-staging.onrender.com/health || exit 1
          curl -f https://auzap-staging.onrender.com || exit 1

      - name: Comment PR with staging URL
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `üöÄ **Staging deployment ready!**

              üì± Frontend: https://auzap-staging.onrender.com
              üîß Backend API: https://auzap-backend-staging.onrender.com

              Test your changes and verify everything works before merging.`
            })

  # Preview Deployment for PRs
  preview-deployment:
    name: Preview Deployment
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'pull_request'
    environment:
      name: preview
      url: https://auzap-pr-${{ github.event.number }}.onrender.com

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Build application
        run: |
          cd frontend
          npm ci
          VITE_API_URL=https://auzap-backend-api.onrender.com/api npm run build

      - name: Deploy Preview
        uses: netlify/actions/cli@master
        with:
          args: deploy --dir=frontend/dist --alias=pr-${{ github.event.number }}
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}

      - name: Comment PR with preview URL
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `üîç **Preview deployment ready!**

              üì± Preview: https://pr-${{ github.event.number }}--auzap.netlify.app

              This preview uses production backend APIs.`
            })

  # Security Analysis
  security-analysis:
    name: Security Analysis
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

      - name: Run OWASP ZAP security scan
        if: github.ref == 'refs/heads/develop'
        run: |
          docker run -v $(pwd):/zap/wrk/:rw \
            -t owasp/zap2docker-stable zap-baseline.py \
            -t https://auzap-staging.onrender.com \
            -J zap-report.json || true

      - name: Upload security scan results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-scan-results
          path: |
            zap-report.json
            snyk-results.json
          retention-days: 30